{
  "name": "dotq",
  "version": "0.1.1",
  "scripts": {
    "test": "mocha -R spec"
  },
  "main": "./",
  "licenses": [
    {
      "type": "Apache License 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "homepage": "https://github.com/luin/dotq",
  "repository": {
    "type": "git",
    "url": "git://github.com/luin/dotq.git"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "keywords": [
    "promise",
    "q"
  ],
  "dependencies": {
    "q": "~0.9.6"
  },
  "devDependencies": {
    "mocha": "~1.12.1",
    "should": "~1.2.2"
  },
  "readme": "# dotQ\nYet another [Q](https://github.com/kriskowal/q).\n\n## Introduce\nThe following code shows a pretty common case of deeply nested callbacks in JavaScript. It doesn't take a genius to figure out that these nested callbacks will eventually become a bit of a headache:\n\n\tstep1(function (value1) {\n\t  step2(value1, function(value2) {\n\t    step3(value2, function(value3) {\n\t      step4(value3, function(value4) {\n\t        // Do something with value4\n\t      });\n\t    });\n\t  });\n\t});\n\nWith the dotQ library, you can flatten the pyramid.\n\n\trequire('dotq');\n\n\tstep1.promise()\n\t  .then(function(value1) {\n\t    return step2.promise(value1);\n\t  })\n\t  .then(function(value2) {\n\t    return step3.promise(value2);\n\t  })\n\t  .then(function(value3) {\n\t    return step4.promise(value3);\n\t  })\n\t  .then(function(value4) {\n\t    // Do something with value4\n\t  });\n\n## Install\n    npm install dotq\n\n## Difference between dotQ and Q\ndotQ is based on Q. dotQ extends the `Function` object with a `promise` method in order to convert the Node.js style callbacks(`function(err, result)`) into Q Promises.\n\nWhat's more, the style of dotQ works better with the express-promise library.\n\n## Shortcuts\n\n### map / reduce / filter / some / every\ndotQ also extends the Q Promise with some useful methods of Array object. For example:\n\n\tfunction anAsyncFunction(number, callback) {\n\t  callback(null, [number, number + 1, number + 2]);\n\t}\n\n\tanAsyncFunction.promise(3)\n\t  .map(function(n) {\n\t    return n + 10;\n\t  })\n\t  .then(function(result) {\n\t    console.log(result); // [ 13, 14, 15 ]\n\t  });\n\n\n## How to use\nIn node.js, Each file loaded shares the same primordial objects like Object, Array, etc,\nso you can just require dotQ once in your initialization, after which you can use dotQ everywhere.\n\n## OMG IT EXTENDS FUNCTION???!?!@\nhttps://github.com/visionmedia/should.js/#omg-it-extends-object\n\nhttp://sugarjs.com/native\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013 Zihua Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "description": "Yet another [Q](https://github.com/kriskowal/q).",
  "bugs": {
    "url": "https://github.com/luin/dotq/issues"
  },
  "_id": "dotq@0.1.1",
  "dist": {
    "shasum": "43c136f2b266b151a55199565e739dab635c5bf2"
  },
  "_from": "dotq@*",
  "_resolved": "https://registry.npmjs.org/dotq/-/dotq-0.1.1.tgz"
}
